import { SuccessAlert } from "@/components/Alerts";
import { Person } from "@/lib/apis/payments/models";
import { useEffect, useState } from "react";
import PersonFields from "@/components/people/PersonFields";
import { useRouter } from "next/router";
import { getPersonById, updatePerson } from "@/lib/apis/payments";
import { Container } from "@/components/layout/SideBar";
import Head from "next/head";

const Update = () => {
    const router = useRouter()
    const { id } = router.query
    const [loading, setLoading] = useState(false)
    const [updated, setUpdated] = useState(false)
    const [errors, setErrors] = useState<Map<string, string[]>>()
    const [person, setPerson] = useState<Person | undefined>(undefined)

    useEffect(() => {
        if (!id) return;

        getPersonById(parseInt(id as string))
            .then(x => setPerson(x.data));

    }, [id])

    const onSubmit = async (p: Person) => {
        setLoading(true);
        setUpdated(false);
        const data = await updatePerson(p);
        if (data.errors) {
            setErrors(data.errors);
        }
        else {
            setUpdated(true);
            setTimeout(() => setUpdated(false), 1500);
        }
        setLoading(false);
    }

    const onFormSubmit = (e: React.SyntheticEvent<HTMLFormElement>) => {
        e.preventDefault();
        setErrors(undefined);
        const form = e.currentTarget;
        const formData = new FormData(form);
        const p: Person = {
            id: parseInt(id as string),
            name: formData.get("name") as string,
            lastName: formData.get("lastName") as string,
            documentId: formData.get("documentId") as string,
            groupId: parseInt(formData.get("groupId") as string),
            academicRecordNumber: parseInt(formData.get("academicRecordNumber") as string) ?? undefined,
            amipa: formData.get("amipa") === "on" ? true : false,
            enrolled: formData.get("enrolled") === "on" ? true : false,
            subjectsInfo: formData.get("subjectsInfo") as string ?? undefined,
        };
        onSubmit(p);
    }

    const formDisabled = () => loading;

    if (!person) return null;

    return (
        <>
            <Head>
                <title>Editar persona - IES MOSSÃˆN ALCOVER</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main>
                <div className="max-w-lg m-auto">
                    <div className="m-5">
                        {updated ? <SuccessAlert text="Persona actualitzada correctament" /> : null}
                        <form className="mt-5" action="#" method="post" onSubmit={onFormSubmit} autoComplete="off">
                            <PersonFields
                                allowSetStudent={false}
                                errors={errors}
                                person={person} />
                            <div>
                                <input
                                    disabled={formDisabled()}
                                    className="w-full mt-6 bg-blue-500 hover:cursor-pointer hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline disabled:bg-slate-50 disabled:text-slate-500 disabled:border-slate-200 disabled:shadow-none disabled:hover:cursor-not-allowed"
                                    value="Guardar canvis"
                                    type="submit" />
                            </div>
                        </form>
                    </div>
                </div>
            </main>
        </>
    )
}

export default function UpdatePersonPage() {
    return (
        <Container>
            <Update />
        </Container>
    )
};