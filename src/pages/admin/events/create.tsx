import { SuccessAlert } from "@/components/Alerts";
import { createEvent } from "@/lib/apis/payments/client";
import { Event } from "@/lib/apis/payments/models";
import { useState } from "react";
import EventFields from "@/components/events/EventFields";
import { Container } from "@/components/layout/SideBar";
import Head from "next/head";

const defaultEvent: Event = {
    id: 0,
    code: "",
    name: "",
    description: "",
    price: 0,
    amipaPrice: 0,
    publishDate: new Date().toISOString().split('T')[0],
    unpublishDate: new Date().toISOString().split('T')[0],
    enrollment: false,
    amipa: false
};


const Create = () => {
    const [loading, setLoading] = useState(false)
    const [created, setCreated] = useState(false)
    const [codeCreated, setCodeCreated] = useState("")
    const [errors, setErrors] = useState<Map<string, string[]>>()

    const onSubmit = async (e: Event) => {
        setLoading(true);
        const data = await createEvent(e);
        if (data.errors) {
            setErrors(data.errors);
            setLoading(false);
        }
        else {
            const code = data.data as string;
            setCodeCreated(code);
            setCreated(true);
        }
    }

    const onFormSubmit = async (e: React.SyntheticEvent<HTMLFormElement>) => {
        e.preventDefault();

        const form = e.currentTarget;
        const formData = new FormData(form);

        const event: Event = {
            id: 0,
            code: formData.get("code") as string,
            name: formData.get("name") as string,
            description: formData.get("description") as string,
            price: parseFloat(formData.get("price") as string),
            amipaPrice: parseFloat(formData.get("amipaPrice") as string),
            publishDate: formData.get("start") as string,
            unpublishDate: formData.get("end") as string,
            enrollment: formData.get("enrollment") == null ? false : true,
            amipa: formData.get("amipa") == null ? false : true,

        };

        await onSubmit(event);
    }

    const formDisabled = () => loading;

    return (
        <>
            <Head>
                <title>Afegir event</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main>
                <div className="max-w-lg m-auto">
                    <div className="m-5">
                        {created ?
                            <SuccessAlert text={`Event afegit correctament el codi de l'event Ã©s: ${codeCreated}` }/> :
                            <form action="#" method="post" onSubmit={onFormSubmit} autoComplete="off">
                                <EventFields
                                    allowSetEvent={true}
                                    errors={errors}
                                    event={defaultEvent} />
                                <div>
                                    <input
                                        disabled={formDisabled()}
                                        className="w-full mt-6 bg-blue-500 hover:cursor-pointer hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline disabled:bg-slate-50 disabled:text-slate-500 disabled:border-slate-200 disabled:shadow-none disabled:hover:cursor-not-allowed"
                                        value="Afegir Event"
                                        type="submit" />
                                </div>
                            </form>
                        }
                    </div>
                </div>
            </main>
        </>

    )
}

export default function CreateEventPage() {
    return (
        <Container>
            <Create />
        </Container>
    )
};