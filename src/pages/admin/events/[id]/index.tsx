import { SuccessAlert } from "@/components/Alerts";
import { createEvent, getEventById, updateEvent } from "@/lib/apis/payments/client";
import { Event } from "@/lib/apis/payments/models";
import { useEffect, useState } from "react";
import EventFields from "@/components/events/EventFields";
import { Container } from "@/components/layout/SideBar";
import Head from "next/head";
import { useRouter } from "next/router";

const Update = () => {
    const router = useRouter()
    const { id } = router.query
    const [loading, setLoading] = useState(false)
    const [updated, setUpdated] = useState(false)
    const [errors, setErrors] = useState<Map<string, string[]>>()
    const [event, setEvent] = useState<Event | undefined>(undefined)

    useEffect(() => {

        if (!id) return;
        getEventById(parseInt(id as string))
            .then(x => {
                if (!x.data) {
                    return;
                }
                const publish = new Date(x.data.publishDate);
                x.data.publishDate = toInputDate(publish);
                x.data.unpublishDate = x.data.unpublishDate ? toInputDate(new Date(x.data.unpublishDate)) : "";
                setEvent(x.data)

            });
    }, [id])


    const onSubmit = async (e: Event) => {
        setLoading(true);
        setUpdated(false);

        const data = await updateEvent(e);
        if (data.errors) {
            setErrors(data.errors);
        }
        else {
            setUpdated(true);
            setTimeout(() => setUpdated(false), 1500);
        }
        setLoading(false);
    }

    const onFormSubmit = async (e: React.SyntheticEvent<HTMLFormElement>) => {
        e.preventDefault();
        setErrors(undefined);

        const form = e.currentTarget;
        const formData = new FormData(form);

        const publish  = new Date(formData.get("start") as string);
        const unpublish  = new Date(formData.get("end") as string);

        const event: Event = {
            id: parseInt(id as string),
            code: formData.get("code") as string,
            name: formData.get("name") as string,
            description: formData.get("description") as string,
            price: parseFloat(formData.get("price") as string),
            amipaPrice: parseFloat(formData.get("amipaPrice") as string),
            publishDate: publish.toJSON(),
            unpublishDate: unpublish ? unpublish.toJSON() : undefined,
            enrollment: formData.get("enrollment") == null ? false : true,
            amipa: formData.get("amipa") == null ? false : true,

        };

        await onSubmit(event);
    }

    const formDisabled = () => loading;
    if (!event) return null;

    return (
        <>
            <Head>
                <title>Editar event</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main>
                <div className="max-w-lg m-auto">
                    <div className="m-5">
                        {updated ? <SuccessAlert text="Event editat correctament." /> : null}

                        <form className="mt-5" action="#" method="post" onSubmit={onFormSubmit} autoComplete="off">
                            <EventFields
                                errors={errors}
                                event={event} />
                            <div>
                                <input
                                    disabled={formDisabled()}
                                    className="w-full mt-6 bg-blue-500 hover:cursor-pointer hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline disabled:bg-slate-50 disabled:text-slate-500 disabled:border-slate-200 disabled:shadow-none disabled:hover:cursor-not-allowed"
                                    value="Guardar Canvis"
                                    type="submit" />
                            </div>
                        </form>

                    </div>
                </div>
            </main>
        </>

    )
}

export default function UpdateEventPage() {
    return (
        <Container>
            <Update />
        </Container>
    )
};

const twoDigit = (n: number) => n < 10 ? '0' + n : '' + n;
const toInputDate = (d: Date): string => `${d.getFullYear()}-${twoDigit(d.getMonth() + 1)}-${twoDigit(d.getDate())}T${twoDigit(d.getHours())}:${twoDigit(d.getMinutes())}`;