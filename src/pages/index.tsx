import Head from 'next/head'
import { Noto_Sans } from '@next/font/google';
import { useState } from 'react';
import { PeopleActiveEventsVm, getPersonActiveEvents } from '@/lib/apis/payments';

const font = Noto_Sans({ weight: '400', subsets: ['devanagari'] })

const Home = () => {

    const [step, setStep] = useState(1)
    const [viewModel, setViewModel] = useState<PeopleActiveEventsVm | undefined>(undefined);

    const onEventsLoaded = (data: PeopleActiveEventsVm) => {
        setStep(2);
        setViewModel(data);
    }

    return (
        <>
            <Head>
                <title>Pagaments - IES MOSSÃˆN ALCOVER</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main className={`${font.className} container mx-auto px-5 mt-10 max-w-md`}>
                {step === 1 ? <FirstStep onLoaded={onEventsLoaded} /> : null}
                {step === 2 && viewModel ? <SecondStep data={viewModel}/> : null}
            </main>
        </>
    )
}

export default Home


interface FirstStepProps {
    onLoaded: (data: PeopleActiveEventsVm) => void,
}

const FirstStep = ({ onLoaded }: FirstStepProps) => {

    const [loading, setLoading] = useState(false);
    const [errors, setErrors] = useState<Map<string, string[]>>()

    const onFormSubmit = async (e: React.SyntheticEvent<HTMLFormElement>) => {
        e.preventDefault();
        setLoading(true);
        const form = e.currentTarget;
        const formData = new FormData(form);
        const documentId = formData.get("documentId") as string;
        const response = await getPersonActiveEvents(documentId);
        if (response.errors) {
            setErrors(response.errors)
            setLoading(false);
        } else if (response.data) {
            onLoaded(response.data);
        }
    }

    const displayErrors = (key: string) => {
        if (!errors || !errors.has(key)) return null;

        const list = errors.get(key) as string[];
        return (
            <>
                {list.map((x, idx) => <p key={idx} className="mt-3 text-red-500 italic">{x}</p>)}
            </>
        )
    }

    return (
        <form action="#" onSubmit={onFormSubmit}>
            <div>
                <label
                    className="
                        block
                        uppercase
                        tracking-wide
                        text-gray-700
                        text-md
                        font-bold
                        mb-2"
                    htmlFor="documentId">Document d'identitat</label>
                <input
                    required={true}
                    className="
                        px-4
                        w-full
                        text-lg
                        text-gray-700
                        border-2
                        border-gray-600
                        rounded
                        py-3
                        leading-tight
                        focus:outline-none
                        focus:bg-white"
                    id="documentId" name="documentId" defaultValue={""} onChange={() => setErrors(undefined)} />
                {displayErrors("")}
            </div>

            <div>
                <input
                    disabled={loading}
                    className="w-full mt-6
                    bg-blue-500
                    hover:cursor-pointer
                    hover:bg-blue-700
                    text-white
                    text-lg
                    py-2
                    px-4
                    rounded
                    focus:outline-none
                    focus:shadow-outline
                    disabled:bg-slate-50
                    disabled:text-slate-500
                    disabled:border-slate-200
                    disabled:shadow-none
                    disabled:hover:cursor-not-allowed"
                    value="Continua"
                    type="submit" />
            </div>
        </form>
    )
}

interface SecondStepProps {
    data: PeopleActiveEventsVm
}

const SecondStep = ({ data }: SecondStepProps) => {
    const { events } = data;
    console.log(data)
    return <ul>
        {events.map(x => <li key={x.code}>{x.name}</li>)}
    </ul>
}