import Head from 'next/head'
import useUser from '@/lib/hooks/useUser'
import { useEffect, useState } from 'react'
import { GetPeopleView, getPeopleView } from '@/lib/apis/payments'
import Table, { Row } from '@/components/Table'

const tableHeaders: string[] = ["Identitat", "Nom", "Llinatges", "NÃºmero expedient", "Grup"];

const People = () => {

    const { user } = useUser()

    const [loading, setLoading] = useState(true)
    const [courses, setCourses] = useState<any[]>([])
    const [people, setPeople] = useState<any[]>([])
    const [currentCourseId, setCurrentCourseId] = useState<number | undefined>()

    const setPeopleView = (pv: GetPeopleView | undefined) => {
        if (pv == undefined) return;
        setCourses(pv.courses);
        setPeople(pv.people);
        setCurrentCourseId(pv.selectedCourseId);
    }

    const mapToRow = (): Row[] => {
        return people.map(x => {
            return { key: x.id, values: [x.documentId, x.firstName, x.lastName, x.academicRecordNumber, x.group.name] }
        });
    }

    const onCourseSelected = (courseId: number) => {
        setCurrentCourseId(courseId)
    }

    useEffect(() => {
        getPeopleView(currentCourseId)
            .then(x => setPeopleView(x))
            .finally(() => setLoading(false))
    }, [currentCourseId]);

    if (loading || !user) {
        return null
    }

    return (
        <>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main>
                <CourseSelector
                    courses={courses}
                    currentCourseId={currentCourseId || 0}
                    onSelectCourse={onCourseSelected}
                    />
                <Table
                    paging={false}
                    headers={tableHeaders}
                    rows={mapToRow()}
                />
            </main>
        </>
    )
}

export default People

interface CourseSelectorProps {
    courses: any[],
    currentCourseId: number,
    onSelectCourse: (courseId: number) => void,
}

const CourseSelector = ({ courses, currentCourseId, onSelectCourse }: CourseSelectorProps) => {
    return (
        <>
            <label htmlFor="course" className="block mt-3 mb-2 text-sm font-medium text-gray-900 dark:text-white">Selecciona el curs escolar</label>
            <select 
                id='course'
                value={currentCourseId}
                onChange={e => onSelectCourse(parseInt(e.target.value))}
                className="mb-4 max-w-xs bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500">
                {courses.map(x => <option key={x.id} value={x.id}>{x.name}</option>)}
            </select>
        </>
    )
}